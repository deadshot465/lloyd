(import asyncio)
(import base64)
(import discord)
(import json)
(import os)
(import requests)
(import [utils.constants [LLOYD-COLOR LISP-LOGO]])

(setv SUBMISSION-URL "https://judge0-ce.p.rapidapi.com/submissions?base64_encoded=true&fields=*")
(setv LISP-CODE 55)
(setv RESULT-RAW-URL "https://judge0-ce.p.rapidapi.com/submissions/{token}?base64_encoded=true&fields=*")

(defn generate-auth-header [host]
    (setv api-key (.getenv os "RAPID_API_KEY"))
    (if (= api-key None) {}
        {"content-type" "application/json"  "x-rapidapi-key" api-key  "x-rapidapi-host" host}))

(defn/a get-eval-result [header token ctx]
    (setv result-url (.replace RESULT-RAW-URL "{token}" token))
    (setv request (.request requests "GET" result-url :headers header))
    (print f"{request.status_code}")
    (setv response-body (.loads json request.text))
    (if (and (not (= (.get response-body "stderr") None)) (not (= (get response-body "stderr") "")))
        (do (setv stderr (-> (.b64decode base64 (get response-body "stderr"))
                             (str)
                             (.lstrip "b'")))
            (setv error-message f"I can't evaluate your input because there's an error! Error: **{stderr}**")
            (if (and (not (= (.get response-body "message") None)) (not (= (get response-body "message") "")))
                (do (setv message (-> (.b64decode base64 (get response-body "message"))
                                      (str)
                                      (.lstrip "b'")))
                    (setv error-message f"{error-message}\nHere is some extra message for you: **{message}**")))
            (if (> (len error-message) 2000)
                (setv error-message (get error-message (slice 0 2000))))
            (await (.send ctx error-message))
            (return True)))
    (if (or (= request None) (= (.get response-body "stdout") None) (= (.get response-body "stdout") ""))
        (return False))
    (setv author ctx.author)
    (setv description f"Alright then. Here is the evaluation result you asked for, {author.display_name}!\n")
    (setv description f"{description}```bash\n")
    (setv output (-> (.b64decode base64 (get response-body "stdout"))
                                        (.decode "utf-8")
                                        (str)
                                        (.lstrip "b'")
                                        (.replace "\\n" "\n")
                                        (.rstrip "\n'")))
    (setv description f"{description}{output}\n```")
    (if (> (len description) 2000)
        (do (await (.send ctx "Sorry! The length of the result is too long. I can't send it!"))
            (return True)))
    (setv embed (.Embed discord :description description :colour LLOYD-COLOR))
    (.set_author embed :name author.display_name  :icon_url author.avatar_url)
    (.set_thumbnail embed :url LISP-LOGO)
    (setv seconds (get response-body "time"))
    (.add_field embed :name "Time Spent"  :value f"{seconds} sec"  :inline True)
    (setv memory (get response-body "memory"))
    (.add_field embed :name "Memory Spent"  :value f"{memory} KB"  :inline True)
    (if (not (= (str (get response-body "exit_code")) ""))
        (.add_field embed :name "Exit Code"  :value (str (get response-body "exit_code"))  :inline True))
    (if (not (= (str (get response-body "exit_signal")) ""))
        (.add_field embed :name "Exit Signal"  :value (str (get response-body "exit_signal"))  :inline True))
    (await (.send ctx :embed embed))
    True)

(defn/a inner-loop [header token ctx attempts]
    (if (and (= (await (get-eval-result header token ctx)) False) (> attempts 0))
        (await (inner-loop header token ctx (- attempts 1)))
        (if (<= attempts 0) (await (.send ctx "Max attempt reached! Sorry about that!")))))

(defn/a execute [bot ctx content]
    (setv header (generate-auth-header "judge0-ce.p.rapidapi.com"))
    (setv code (.split content "\n"))
    (setv split (get code (slice 1 (- (len code) 1))))
    (setv actual-code (.join "\n" split))
    (setv request-data {"language_id" LISP-CODE  "source_code" (-> (.encode actual-code "utf-8")
                                                                   (base64.b64encode)
                                                                   (str)
                                                                   (.lstrip "b'"))})
    (setv query-string {"base64_encoded" "true"  "fields" "*"})
    (setv request (.request requests "POST" SUBMISSION-URL :headers header  :data (.dumps json request-data)  :params query-string))
    (print (str request.status_code))
    (setv token (str (get (.loads json request.text) "token")))
    (await (.create_task asyncio (inner-loop header token ctx 10))))